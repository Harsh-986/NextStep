generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  clerkUserId       String             @unique
  email             String             @unique
  name              String?
  imageUrl          String?
  industry          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  bio               String?
  experience        Int?
  skills            String[]
  assessments       Assessment[]
  callAnalytics     CallAnalytics[]
  coverLetter       CoverLetter[]
  interviewAssess   InterviewAssess[]
  interviewSessions InterviewSession[]
  resume            Resume?
  industryInsight   IndustryInsight?   @relation(fields: [industry], references: [industry])
}

model Assessment {
  id             String   @id @default(cuid())
  userId         String
  quizScore      Float
  questions      Json[]
  category       String
  improvementTip String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model InterviewAssess {
  id             String   @id @default(cuid())
  userId         String
  interviewScore Float
  questions      Json[]
  domain         String[]
  category       String
  improvementTip String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model InterviewSession {
  id                 String        @id @default(cuid())
  userId             String
  sessionType        String
  industry           String?
  role               String?
  difficulty         String?
  duration           Int?
  questions          Json[]        @default([])
  responses          Json[]
  overallScore       Float?
  technicalScore     Float?
  communicationScore Float?
  confidenceScore    Float?
  strengths          String[]
  weaknesses         String[]
  improvementTips    String[]
  detailedFeedback   String?
  startedAt          DateTime?
  endedAt            DateTime?
  status             SessionStatus @default(SCHEDULED)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  user               User          @relation(fields: [userId], references: [id])

  @@index([userId])
}

model CallAnalytics {
  id               String    @id @default(cuid())
  userId           String
  sessionId        String?   @unique
  duration         Float?
  cost             Float?
  transcript       String?
  speakingTime     Float?
  silenceTime      Float?
  wordsPerMinute   Float?
  fillerWordsCount Int?
  startedAt        DateTime?
  endedAt          DateTime?
  metadata         Json?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([sessionId])
}

model Resume {
  id        String   @id @default(cuid())
  userId    String   @unique
  content   String
  atsScore  Float?
  feedback  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model CoverLetter {
  id             String   @id @default(cuid())
  userId         String
  content        String
  jobDescription String?
  companyName    String
  jobTitle       String
  url            String?
  status         String   @default("draft")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model IndustryInsight {
  id                String        @id @default(cuid())
  industry          String        @unique
  salaryRanges      Json[]
  growthRate        Float
  demandLevel       DemandLevel
  topSkills         String[]
  marketOutlook     MarketOutlook
  keyTrends         String[]
  recommendedSkills String[]
  lastUpdated       DateTime      @default(now())
  nextUpdate        DateTime
  users             User[]

  @@index([industry])
}

enum DemandLevel {
  HIGH
  MEDIUM
  LOW
}

enum MarketOutlook {
  POSITIVE
  NEUTRAL
  NEGATIVE
}

enum SessionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  FAILED
}
